

Taken from the point of view of the ADCE

                        WDCNT                 WDHOLD                  WDCNT           14ms
                        0                      1                       2          ___  __  __     3
      SCK                ______________________|_______________________|__________   __  __  _____|____
                                               |                       |                          |
                             8ms     adcCheck  |       register        |           PRE/DATA-i-o/CHK-i-o
                         ___________ || resend |        period         |                          |
   TIMER            _____           ___________|_______________________|__________________________|
                                               |<infin.dly>< +min 8ms> |              pulse last byte = end transfer
                    _____.............................................                    _____
   PIN              _____\.............................................\__________________     _________ 
   (signal from
   node pov)                                   |                       |                          |
   
   TRIGGER               ___________________(__/  ) if node sends cmd      
   (trigger from
    a gpio pin)                                |                       |                          |
                                               ___________________________________________________
   POUT                  _____________________/ x = (PIN || TRIGGER) @ t = 1                       \___
   (interrupt                                   x == 0 => back to t=0
   from node pov)                              |                       |                          |
                                               |                       |                          |
   
   
   
   PSEUDO CODE.
   ============
   
   Slave side.
On Power/Reset, goto 0
0  - Reset Watchdog 250ms  
   - "disable" data spi transfer 
   - P1IN can be whatever (not that we have any control on this anyway)
   - set P1OUT low.
   - Start Timer 500ticks (method A)
   - Upon Timer interrupt (method A), 
	run  1. signal = Either (ADC Check or Resend mode).
             2. sample = Sample P1IN
             3. transferTrigger = sample || signal
   - if transferTrigger 
        1aa. HOLd Watchdog
        1a. set P1OUT high
	1b. "reset USCI", prepare exchange buffer
	    "enable data spi transfer"
	---
	2. 
	   on usci interrupt : 
		if data spi enabled, exchange buffers
		Reset watchdog 250ms.
		enable P1IN interrupt
	   on P1IN raising flag: if data spi enabled:
				verify checksums (then set Adc check or Resend mode).
				set P1IN in falling flag
	   then on P1IN falling flag:  
				set P1OUT at low.
				disable this interrupt
				goto 0
   - else 
	
	goto 0
Master side.
   Flags avail.   
	Clear to Send.  (signalMaster & signalMask) == 0;
   Actions avail.
	Signal Master   (signalMaster());
   Events avail.
	Process Buffer (from rbi) (mcomProcessBuffer, busy flag)
   On startup
	SIG to low.
   On (first) sync:
	
	Enable INTR interrupt on raising edge.
	if (INTR (is high) call checkDAC);
   
   On Process Buffer:
	
	Check INTR, 
		if low, set SIG high
			
		else (if high), start timer method A. .
		On: Timer method A. re-exec process buffer action.
   
   INTR interrupt : 
	if (raising edge)
		- clear this interrupt flag	
		/// separate action, checkDAC
		- delay (delta T).  
		- SIG To low
		- delay (delta T/2)
		- prepare and send exchange buffer containing CTS and inbuffer if avail.
		- SIG to hi
		- delay (delta T/2) (verify checksums and clear or not CTS/ set SignalMaster and outbuffer, 
				if failed to send, start timer method A (again))
		- SIG to lo.
*/
