/*
    node-mcu-connect . node.js UDP Interface for embedded devices.
    Copyright (C) 2013-4 David Jakubowski

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>. 
*/


After much tinkering, mush simplified & flexible & lower latency & more efficient protocol


M->N
Node Avail

32b [M]    MOSI  [PRE PRE CMD CMD] [DEST_CMD DEST | x             x]     [data 20b]  [ x  x     CHK CHK] 
32b [S-x]  MISO  0   0   0   0     0    0             0             0       0            0 0   CHK CHK

Node Busy

32b [M]    MOSI  [PRE PRE CMD CMD] [DEST_CMD DEST | x             x]     [data 20b]  [ x  x     CHK CHK] 
32b [S-x]  MISO  0   0   0   0     0    0             0             0       0            0   0       0   0

N->M (old sncc mode style, slave cmd can be micmd or sncc)
32b [M]    MOSI  [PRE  PRE CMD CMD] [DEST_CMD DEST_SNCC | x             x]     [data 20b]  [ SNCC_CHK  SNCC_CHK     CHK CHK] 
32b [S-x]  MISO  [PRE* PRE* 0  0   [node id  mask   node id in mask]     0             0   0       0          0     SNCC_CHK]




MASTER
{ unsigned word preamble,
  unsigned word cmd,
  unsigned word destinationCmd,
  unsigned word destinationSncc,
  unsigned char data[20],
  unsigned word reserved,
  unsigned word chkSum
}

SLAVE
{ 
  unsigned word preamble,
  unsigned word cmd,
  unsigned word signalMask2,
  unsigned word signalMask1,
  unsigned char data[20],
  unsigned word reserved,
  unsigned word chkSum
}


PROTO


inBFR;
outBFR;
busyFlag;
nodeId;
signal;

main(){

	busyflag = 0;
	inBfr = 0;
	outBfr = 0;
	nodeid = 0x02;
	signal = 0;
}


while (1) {

	_ei()
		sleep+IE
	_di()

	if (action = pb) {
	  PB();
	  cont;
	}
}



PB() {
    _ei();

    _di();
	action &= ~PB
    _ei();
}


isbusy(){

	return action && PB;
}

sendMsgToMaster() {
	fillin(outBfr)
	signal = 1
}

signalmaster(){
	TX = 0xac;
}


INT() {

 if(sync) {
	
	*inBfr++ = RX;	

	BFR-END-Boundary =>     If (we had started checksumming) and CS matches, Action = PB;
				If we have something to signal, signalmaster.
	HEAD-END-Boundary =>    CHKHEAD(); // check head and premble
			  =>    IF Signal => Add signal in bfr.
	DEST-END-Boundary =>
			  =>    If sncc found and if targets our id => send out data 20b
			  =>    If !busy, If cmd  found and if it targets our id => start checksummming data.
	DATA-END-Boundary =>    if we had started checksumming send out checksum data.


 } else {
   sync()
 }


}
